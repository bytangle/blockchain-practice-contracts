import { BigNumber, ethers, Signer } from "ethers";

/**
 * @class Basic Micropayment class
 * @description Create and sign payment messages for eth smart contracts
 * @author Edicha Joshua <mredichaj@gmail.com>
 */
class MicroPayment {
    provider : ethers.providers.JsonRpcProvider;
    signer : Signer;
    accts : string[];

    /**
     * @constructor initialize signer for signing the transaction messages
     * @param providerHttpAddr address of the JsonRPCProvider
     */
    constructor(providerHttpAddr : string) {
        this.provider = new ethers.providers.JsonRpcProvider(providerHttpAddr);
    }

    /**
     * @description initialize provider and signer
     */
    private async init() {
        if(!this.accts || !this.signer) {
            this.accts = await this.provider.listAccounts();
            this.signer = this.provider.getSigner(this.accts[0]);
        }
    }

    /**
     * @description Create the message to be signed. This message will instruct the contract on how to make the payment
     * @param contractAddr address of the contract that'll process the transaction
     * @param amount the amount to be sent to the recipient
     * @returns hash of the packed encoding of the contract address and the amount to be sent to recipeint
     */
    constructMessage(contractAddr : string, amount : BigNumber) : string {
        return ethers.utils.defaultAbiCoder.encode(
            ["address", "uint256"],
            [contractAddr, amount]
        );
    }

    /**
     * @description sign the message generated by `this.constructMessage`
     * @param message the transaction message to be signed
     * @returns hash signature of the message 
     */
    async signMessage(message : string) : Promise<string> {
        await this.init();
        return this.signer.signMessage(ethers.utils.toUtf8Bytes(message)).catch(e => {
            throw e
        })
    }
}

/**
 * @description program entry point
 */
async function main() {
    const mp = new MicroPayment("http://127.0.0.1:7545");
    const msg = mp.constructMessage("0x950515b4E56069e8dDa9E3C23Df89911086B74f8", ethers.utils.parseEther("2"));
    mp.signMessage(msg).then(r => {
        console.log(r);
    })
}

main();